#

package macro;

#open my($f), ">>", "/dev/pts/13";
open F, ">", "/tmp/macro-$<";

sub start { 1 }

sub story {
  my ($pkg, $arg) = @_;
  my ($path, $filename, $story_ref, $title_ref, $body_ref,
      $dir, $date, $meta)
    = @{$arg}{qw/category filename storyref titleref bodyref
		 catpath datepath metadata/};

  local $_;
  my %macro = ();

  if ($meta->{macros}) {
    for my $file (split /,\s*/, $meta->{macros}) {
      print F "META section requires macro file '$file'\n";
      %macro = (%macro, load($file));
    }
  }

  my $MACPAT = join "|", map quotemeta, keys %macro;
  print F "Initial pattern: $MACPAT\n";
  my @lines = split /\n/, $$body_ref;
  my @outlines;
  while (@lines) {
    $_ = shift @lines;
    if (my ($k, $v) = define1($_)) {
      print F "<$k> => <$v>\n";
      $macro{$k} = $v;
      $MACPAT = join "|", map quotemeta, keys %macro;
      print F "Pattern: $MACPAT\n";
      $_ = "";
      next;
    } elsif (/^#undefall\s*/) {
      %macro = ();
      $MACPAT = "";
      print F "Pattern: $MACPAT\n";
      $_ = "";
    } elsif (/^#load (\w+)\s*/) {
      %macro = (%macro, load($1));
      $MACPAT = join "|", map quotemeta, keys %macro;
      print F "Pattern: $MACPAT\n";
    }
#    for my $m (keys %macro) {
      my $old = $_;
      s/($MACPAT)/$macro{$1}/g;
      print F "  $old\n  $_\n\n" if $old ne $_;
#    }
    push @outlines, $_;
  }

  $$body_ref = join "\n", @outlines;
  return 1;
}

sub load {
  my ($file) = @_;
  my $macros = "$blosxom::plugin_state_dir/macro-$file";
  if (open my($mac), "<", $macros) {
    my @lines = <$mac>;
    printf F "Loaded %d lines from %s\n", 0+@lines, $macros;
    return define(@lines);
  } else {
    warn "Couldn't read macro file '$macros': $!";
    return ();
  }
}

sub define {
  map define1($_), @_;
}

sub define1 {
  my ($line) = @_;
  if ($line =~ /^\#define\s+(\S+)\s+(.*)$/) {
  print F "defining '$1' as '$2'\n";
    return ($1, $2);
  } else {
#    warn "Line `$line' does not look like a definition\n";
    return ();
  }
}

1;
