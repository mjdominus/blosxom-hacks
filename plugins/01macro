#

package macro;

#open my($f), ">>", "/dev/pts/13";
open F, ">", "/tmp/macro-$<";

sub start { 1 }

sub story {
  my ($pkg, $path, $filename, $story_ref, $title_ref, $body_ref) = @_;
  local $_;

  my @lines = split /\n/, $$body_ref;
  my %macro = ();
  my $MACPAT;
  my @outlines;
  while (@lines) {
    $_ = shift @lines;
    if (/^#define\s+(\S+)\s+(.*)$/) {
      print F "<$1> => <$2>\n";
      $macro{$1} = $2;
      $MACPAT = join "|", map quotemeta, keys %macro;
      print F "Pattern: $MACPAT\n";
      $_ = "";
      next;
    } elsif (/^#undefall\s*/) {
      %macro = ();
      $MACPAT = "";
      print F "Pattern: $MACPAT\n";
      $_ = "";
    } elsif (/^#load (\w+)\s*/) {
      my $macros = "$blosxom::plugin_state_dir/macro-$1";
      if (open my($mac), "<", $macros) {
	unshift @lines, <$mac>;
	print F "Loaded macros from $macros\n";
      } else {
	warn "Couldn't read macro file '$macros': $!";
      }
      next;
    }
#    for my $m (keys %macro) {
      my $old = $_;
      s/($MACPAT)/$macro{$1}/g;
      print F "  $old\n  $_\n\n" if $old ne $_;
#    }
    push @outlines, $_;
  }

  $$body_ref = join "\n", @outlines;
  return 1;
}

1;
