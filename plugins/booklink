#

package booklink;

my $bookdb = "$blosxom::plugin_state_dir/books";
open my($f), ">", "/tmp/booklink.$<";
tie my(%book) => "booklink::data";

sub start { 
  local *F;
  open F, "<", $bookdb or return 0;
  while (<F>) {
    chomp;
    my ($tag, $isbn, $title, $imgnum) = split /\t/;
    $f and print $f "$_\n";
    trim($isbn);
#    $isbn = "978$isbn" unless $isbn =~ /^978/;
    my $imgurl = do {
      my $result = "";
      $f and print $f "  imgnum: <$imgnum>\n";
      if ($imgnum =~ /^COVERS\.\w+$/) {
        $imgnum =~ s/COVERS/$tag/;
        $result = qq{https://pic.blog.plover.com/covers/$imgnum};
      } elsif ($imgnum =~ /^\d+$/ && 0) {   # DISABLED
        (my $imgnum2 = $imgnum) =~ s/\d{4}$/0000/;
        $result = qq{http://images.barnesandnoble.com/images/$imgnum2/$imgnum.jpg};
      } else {
#       This one stopped working sometime before 20170719      	
#       $result = qq{http://www.powells.com/cgi-bin/imageDB.cgi?isbn=$isbn};
#
#       Powell's covers stopped working with ISBN10s, and I wrote this
#       to try to fix it, but it doesn't work at all
#  	my $isbn13 = length($isbn) == 10 ? "978$isbn" : $isbn;
#        $result = qq{http://covers.powells.com/$isbn13.jpg};
# This also works, but only for isbn13s:
#        $result = qq{http://powells-covers-2.s3.amazonaws.com/$isbn.jpg};

	 if (length($isbn) == 13) {
	   $result = qq{https://covers.powells.com/$isbn.jpg};
	 } else {
	   # This works as of 20170728, but OL often doesn't have
	   # information for recent books
	   $result = qq{http://covers.openlibrary.org/b/isbn/$isbn-M.jpg};

	   my $lt_dev_key = "4e7443e59f586e9306d61bb521a11d8e";
	   $result = qq{https://covers.librarything.com/devkey/$lt_dev_key/medium/isbn/$isbn};
	 }

#        $result = qq{http://images.amazon.com/images/P/$isbn.01.20TRZZZZ.jpg};
      };
      $f and print $f "  result: $result\n";
      $result;
    };

    my $data = {ISBN => $isbn, TITLE => $title, IMGURL => $imgurl, };
#    $data->{IMGELT} = $imgnum eq "-" ? "" : qq{<IMG SRC="$data->{IMGURL}" BORDER="0" ALIGN="center" ALT="$data->{TITLE}"  >};
     $data->{IMGELT} = qq{<IMG SRC="$data->{IMGURL}" BORDER="0" ALIGN="center" ALT="$data->{TITLE} $data->{IMGURL}"  >};

    $book{$isbn} = $book{$tag} = $data;
  }
  return 1;
}


# http://www.powells.com/partner/29575/biblio/1234567890
sub story {
  my ($pkg, $arg) = @_;
  my ($path, $filename, $story_ref, $title_ref, $body_ref) =
    @{$arg}{qw/category filename storyref titleref bodyref
	       catpath datepath metadata/};

  $$body_ref =~ s{<book>([\w ]+)</book>}
                 {<div class="bookbox"><table align=right width="14%" bgcolor="#ffffdd" border=1><tr><td align=center>
<A HREF="http://www.powells.com/partner/29575/biblio/$book{$1}{ISBN}"><font size="-2">Order</font><br>
<cite><font>$book{$1}{TITLE}</font></cite><br>
$book{$1}{IMGELT}<br>
<font size="-2">from Powell's</font></a>
</td></tr></table></div>}g;

#  $$body_ref =~ s{booklink is disabled}
#                 {booklink is enabled}gi;

  return 1;
}

# Barnes and Noble old book links
#
# <IMG SRC="http://service.bfast.com/bfast/serve?bfmid=2181&sourceid=41259285&bfpid=$book{$1}{ISBN}&bfmtype=book" BORDER="0" WIDTH="1" HEIGHT="1" NOSAVE ><A HREF="http://service.bfast.com/bfast/click?bfmid=2181&sourceid=41259285&bfpid=$book{$1}{ISBN}&bfmtype=book">$book{$1}{IMGELT}</a><BR>
# <A HREF="http://service.bfast.com/bfast/click?bfmid=2181&sourceid=41259285&bfpid=$book{$1}{ISBN}&bfmtype=book"><font size="-1">with kickback</font></a><br>
# <A HREF="http://service.bfast.com/bfast/click?bfmid=2181&bfpid=$book{$1}{ISBN}&bfmtype=book"><font size="-1">no kickback</font></a>

sub trim {
  $_[0] =~ s/^\s+//;
  $_[0] =~ s/\s+$//;
  return $_[0];
}

package booklink::data;

sub TIEHASH {
  my $class = shift;
  bless {} => $class;
}

sub STORE {
  my ($self, $k, $v) = @_;
  $self->{$k} = $v;
}

sub FETCH {
  my ($self, $k) = @_;
  if (exists $self->{$k}) {
    return $self->{$k};
  } else {
    return {ISBN => "0000000000", TITLE => "Unknown book with tag '$k'", IMGURL => "" };
  }
}

package booklink::field;

sub TIEHASH {
  my $class = shift;
  my $data = shift;
  my $sep = shift;
  bless [ $data, $sep ] => $class;
}

sub FETCH {
  my $self = shift;
  my $key = shift;
  my ($isbn, $index) = split /$;/o, $key;
#  print $f "<$key> <$isbn> <$index>\n";
  my $data = $self->[0]{$isbn};
  if ($data eq "") {
    return "[[data field $index for unknown book $isbn]]";
  }
  my @field = split /$self->[1]/, $data;
  return $field[$index];
}

1;

