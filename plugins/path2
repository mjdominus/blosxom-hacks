#

package path2;
use HTML::TreeBuilder;

#my $blogimg = "http://www.plover.com/~mjd/pictures/blog";
my $blogimg;
my $first_image_url;
my $first_image_alt;

sub start {
  return unless $blosxom::flavour eq "html";
  open F, ">", "/tmp/path.$>" or die ":F: $!";
  { my $ofh = select F; $|=1; select $ofh }
  print F scalar(localtime()), " flavour=$blosxom::flavour\n";
  $blogimg = $blosxom::testmode
        ? $testmode_image_url
        : $production_image_url;
  die "No blog image URL defined" unless defined $blogimg;
  return 1;
}

sub last {
  undef $first_image_url;
}

# key "FOO" is a function which will generate the expansion of
# urls that look like FOOREF/path and FOOLINK/path
# Argument $_[0] is the path, without the leading slash.
#   This argument is also in $_ for convenience
# Argument $_[1] is the abbreviation that is being expanded (FOO or whatever)
# Argument $_[2] is the complete $args structure passed to story().
my %translate =
  (
   "CATCHALL" => sub { "/???$_[1]???/$_[0]" },

   # link back to the current blog
   "BLOG" => sub { "$blosxom::url/$_" },

   # link to the images for this article
   "BLOGIMG" => sub {
     my ($file, undef, $arg) = @_;
     m#/# ? "$blogimg/$_" : "$blogimg$arg->{category}/$arg->{filename}/$file"
   },

   # Universe of Discourse
   "U" => sub { "https://blog.plover.com/$_" },
   "UD" => sub { "https://blog.plover.com/$_" },
   "UOD" => sub { "https://blog.plover.com/$_" },

   # Content-Type: text/shitpost
   "SP" => sub { "https://shitpost.plover.com/$_" },

   # English Wikipedia
   "WP" => sub {
     tr/ /_/;
     s/([^a-zA-Z0-9_])/sprintf("%%%02x", ord($1))/ge;
     "https://en.wikipedia.org/wiki/$_"
   },
  );

my %attr = (a => "href", img => "src", source => "src", embed => "src");

sub story {
  my ($pkg, $arg) = @_;
  my ($path, $filename, $story_ref, $title_ref, $body_ref, $base)
    = @{$arg}{qw/category filename storyref titleref bodyref
		 catpath datepath metadata/};

  print F "*** $path $filename\n";
  return unless $$body_ref =~ /\b([A-Z]*)(?:LINK|REF)\b/;
  print F "    checking content\n";

  my $TB = HTML::TreeBuilder->new();
  my $html = $TB->parse($$body_ref)->eof->elementify();
  my $changed;

  my @changes;
  # HTML::TreeBuilder fails to include SOURCE elements in the parsed output!
  # See https://rt.cpan.org/Ticket/Display.html?id=127503
  for my $link ($html->look_down(_tag => qr/\A (img|a|embed|source|video) \z/xi)) {
    print F "    examining element " . $link->tag . "\n";
    my $attr = $attr{$link->tag} or next;
    my $url = $link->attr($attr);
    print F "      found link attr '$attr' with url '$url'\n";

    if ($url =~ m{^([A-Z]*)(?:LINK|REF)/(.*)}) {
      my ($where, $what) = ($1, $2);
      my $translate = $translate{$1};
      unless ($translate) {
	print F "  ! WARNING: no translator defined for '$1'; using catchall\n";
	$translate = $translate{"CATCHALL"};
      }
      print F "    <$url>\n      where=$where\n      what= $what\n";
      local $_ = $2;
      my $replacement = $translate->($2, $1, $arg);
      print F "    Will change it to <$replacement>\n";
      push @changes, [ qq{$attr="$url"}, join("",  qq{$attr="$replacement"}), $link->attr("alt") || "(no alt)" ];
    }
  }

  print F "    ----\n" if @changes;
  for my $change (@changes) {
    my ($from, $to, $alt) = @$change;
    print F "    Replacing <$from>\n         with <$to>\n        alt=$alt\n";
    if (! defined $first_image_url && $from =~ /src=/) {
      print F "      Trying to set first image; to=$to\n";
      ($first_image_url) = ($to =~ /src="(.*)"/);
      ($first_image_alt = $alt) =~ tr/\n/ /s;
      print F "      first_image_url set to $first_image_url\n";
      print F "      first_image_alt set to $first_image_alt\n";
    }
    my $pos = index($$body_ref, $from);
    if ($pos < 0) {
      print F "      !!! Couldn't find target!\n";
      next;
    }
    substr($$body_ref, $pos, length($from), $to);
    print F "         ...replaced at position $pos\n";
  }

  return 1;
}

sub foot {
  print F "In foot with first_image = $first_image_url\n";
  $first_image_url ||= "https://pic.blog.plover.com/FIRST_IMAGE_DEFAULT.jpg";
  # I kinda hate that this is hardwired here and not in the head.html template
  # but good enough I guess
  $first_image_alt ||= "Square quilt block made of 32 black and white triangles"; 
  $blosxom::output =~ s/FIRST_IMAGE_URL/$first_image_url/g;
  $blosxom::output =~ s/FIRST_IMAGE_ALT/$first_image_alt/g;
}

1;
