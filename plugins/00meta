# -*- cperl -*-

package meta;
use lib '/home/mjd/misc/blog/src/lib';
use Tie::File::Hash;
use strict;
use Fcntl qw(O_RDWR O_CREAT LOCK_EX);

# metainformation examples:
#  tags
#  title
#  not-yet flag

my $metadb = "$blosxom::plugin_state_dir/META";
open my($f), ">", "/tmp/meta.$<";
print $f "Starting at " . localtime() . "\n";
print $f "Tie::File:Hash version $Tie::File::Hash::VERSION\n";
our %metadb;

sub start {
  tie %metadb => 'Tie::File::Hash' => $metadb, 
    {
     mode => O_RDWR | O_CREAT,
     flock => LOCK_EX,
    }
      or die "Couldn't tie $metadb: $!";
  *blosxom::META = \%metadb;
  print $f "meta plugin tied $metadb\n";
  return 1;
}

sub end {
  print $f "Untying\n";
  untie %metadb;
}

# Retrieve metadata
# There is no corresponding put() function
# That is because metadata is stored
# by writing it into the META section
# of the individual articles.
sub get {
  my ($path, $key) = @_;
  print $f "call: get($path, $key)\n";
  my $z = $metadb{meta_key($path, $key)};
  print $f "  ret: $z\n";
  return $z;
}

sub get_date {
  my ($path, $key) = @_;
  my $date = get($path, $key);
  return convert_date($date);
}

sub convert_date {
  my ($date) = @_;
  print $f "  Converting date '$date'\n";
  my $res;
  if (! defined $date) {
    print $f "  Undefined date '$date'";
  } elsif ($date =~ /^\d+$/) {
    $res = $date; # assumed to already be epoch time
  } elsif (my ($y, $m, $d) = $date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/) {
    require Time::Local;
    $res = Time::Local::timelocal(0,0,0, $d, $m-1, $y-1900);
  } elsif (my ($y, $m, $d, $h, $mn, $s) =
	   $date =~ /^ \s*
		     (\d\d\d\d)-(\d\d)-(\d\d)
		     (?:\s+|[Tt])
		     (\dd):(\dd):(\dd)
		     \s* $/x) {
    require Time::Local;
    $res = Time::Local::timelocal($s, $mn,$h, $d, $m-1, $y-1900);
  } else {
    print $f "  Unrecognized date '$date'";
  }
  printf $f "  Result is %s\n", defined($res) ? $res : "UNDEF";
  return $res;
}

# Like get(),
# but assumes that the value is a comma-separated list,
# and returns the list of items in it
sub get_list {
  my ($path, $key, $opt) = @_;
  my $sep = $opt->{separator} // qr/,\s*/;
  my $v = get($path, $key) or return;
  my @items = split $sep, $v;
  wantarray ? @items : \@items;
}

sub has {
  my ($path) = @_;
  return get($path, 'HAS');
}

sub story {
  my ($pkg, $path, $filename, $story_ref, $title_ref, $body_ref, $fullpath)
    = @_;
  my $BAD;

  print $f "meta plugin processing <$path/$filename>\n";
  return unless $$title_ref =~ /\A\s*META\s*\z/;
  print $f "Found meta section in <$path/$filename>\n";

  my %meta = (HAS => 1);
  {
    my @body = split /\n/, $$body_ref;
    my @meta;
    push @meta, shift @body while @body && $body[0] =~ /\S/;
    shift @body;
    $$body_ref = join "\n", @body;
    print $f "$path/$filename: found " . @meta . " meta-lines\n";
    for (@meta) {
      print $f "  $_\n";
      s/\s+\z//;
      my ($k, $v) = split /:\s+/, $_, 2;
      $meta{lc $k} = $v;
    }
  };

  $$title_ref = $meta{"title"} || do {
    warn "file $path/$filename has no title in its META section\n";
    $BAD++;
    "(no title in META section)";
  };

  store_metadata("$path/$filename", \%meta);
  my %tied;
  my $obj = tie %tied, 'Metadata', "$path/$filename";
  $blosxom::metadata_hash{"$path/$filename"} = \%tied;
  $blosxom::metadata_obj{"$path/$filename"} = $obj;

  return $BAD ? 0 : 1;
}

sub store_metadata {
  my ($key, $md) = @_;
  print $f "  Storing metadata for $key\n";
  delete_metadata($key);
  print $f "  Putting meta-metadata for $key\n";
  put_metadata_items($key, $md);
  print $f "  Putting metadata for $key\n";
  while (my ($k, $v) = each %$md) {
    $metadb{meta_key($key, $k)} = $v;
  }
  print $f "  Done storing metadata for $key\n";
}

sub delete_metadata {
  my ($key) = @_;
  my @items = get_metadata_items($key);
  return unless @items;
  for my $item (@items) {
    delete $metadb{meta_key($key, $item)};
  }
}

sub get_metadata_items {
  my ($key) = @_;
  my $v = $metadb{meta_key($key, "")};
  split /,\s*/, $v;
}

sub put_metadata_items {
  my ($key, $h) = @_;
  $metadb{meta_key($key, "")} = join "," => sort keys %$h;
}

sub meta_key {
  my ($key, $item) = @_;
  return $key unless defined($item) && length($item) > 0;
  return join "::", $key, lc($item);
}

sub trim {
  $_[0] =~ s/^\s+//;
  $_[0] =~ s/\s+$//;
  return $_[0];
}

END {
  print $f "Exiting at " . localtime() . "\n";
}

package Metadata;
use Carp qw(confess croak);

sub TIEHASH {
  my ($class, $article) = @_;
  bless { article => $article } => $class;
}

sub FETCH {
  my ($self, $k) = @_;
  meta::get($self->{article}, $k);
}

sub EXISTS {
  my ($self, $k) = @_;
  meta::has($self->{article}, $k);
}

sub STORE {
  croak "STORE unimplemented";
}

sub FIRSTKEY {
  my ($self) = @_;
  $self->{keys} = [ meta::get_metadata_items($self->{article}) ];
  return shift @{$self->{keys}};
}

sub NEXTKEY {
  my ($self) = @_;
  return shift @{$self->{keys}};
}

1;

