
package nonotyet;
my $now = time;
my %omit;

sub start { 
    $blosxom::testmode = $ENV{SCRIPT_NAME} =~ /testblog/;
#    $blosxom::show_future_entries = $blosxom::testmode;
    open F, ">", "/tmp/nonotyet.$<";
    print F scalar(localtime), " $$ testmode: $blosxom::testmode\n";
    return 1;
}

use Carp 'carp';

# Suppress articles with "notyet" files
sub filter {
  my ($pkg, $f) = @_;
  for my $k (keys %$f) {
    (my $notyet = $k) =~ s/\.blog$/\.notyet/;
    (my $file = $k) =~ s{^$blosxom::datadir}{}o;
    $file =~ s/\.\w+$//;
    print F "$file $k $f->{$k}\n";

    # Publication date:
    # If there is an explicit "published" in the META section, that is controlling
    #   (but published=0 is ignored in test mode)
    # If not, use the cached date if there is one
    # Otherwise, use the file's mtime

    # Publish the article if its publication date is not in the future
    # and if the date is not zero
    # and if there is no NOTYET file

    # In test mode, "publish" ignore all that stuff; only suppress the
    # article if its date is more than two weeks in the future.

    my $has_meta_published = meta::has_key($file, "published");
    my $meta_published = meta::get_date($file, "published");
    my $has_notyet = -e $notyet;
    my $mtime = (stat $k)[9];
    my $cached_date = $f->{$k};
    my $test_publication_date = $meta_published || $cached_date || $mtime; # used only in test mode
    my $publication_date = $has_meta_published  ? $meta_published :
                           defined $cached_date ? $cached_date : $mtime;

    my $should_publish_in_testmode = $test_publication_date < $now + 14 * 86400;
    my $should_publish   = !$has_notyet && $publication_date != 0 && $publication_date < $now;

    print F "  has_meta_published: $has_meta_published (date $meta_published)\n";
    print F "  cached date: $cached_date\n";
    print F "  mtime: $mtime\n";
    print F "  selected REAL publication date: $publication_date\n";
    print F "  selected TEST publication date: $test_publication_date\n";
    print F "  now: $now\n";
    print F "  has_notyet: ", $has_notyet ? "YES" : "NO", " ($notyet)\n";
    print F "  WILL PUBLISH IN TEST MODE: ", $should_publish_in_testmode ? "YES" : "NO", "\n";
    print F "  WILL PUBLISH LIVE: ", $should_publish ? "YES" : "NO", "\n";

    if ($blosxom::testmode) {
      if ($should_publish_in_testmode) {
        $omit{$file} = 1 if ! $should_publish; # add WILL NOT APPEAR IN LIVE SITE header
      } else {
        delete $f->{$k};
      }
    } else {
      delete $f->{$k} unless $should_publish;
    }
  }

  return 1;
}

sub story {
  my ($pkg, $arg) = @_;
  my ($path, $filename, $story_ref, $title_ref, $body_ref) =
    @{$arg}{qw/category filename storyref titleref bodyref/};
  return 1 unless $blosxom::testmode;
  my $q = "$path/$filename";
  $$body_ref = qq{<p><font color="red" size="+1">Will not appear in live blog</font></p>} . $$body_ref
    if $omit{$q};
}

1;

