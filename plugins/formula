#

package formula;

my $formula = "/home/mjd/misc/blog/bin/formula";
my $target = "/home/mjd/public_html/pictures/blog/tex";
my $texlogfile = "/tmp/formula2-$<.err";

sub start { 
  open D, ">", "/tmp/formula-$<.err";
  print D "$$ ", scalar(localtime), "\n";
  unlink $texlogfile;
  return 1;
}

sub strip_dollars {
  my ($tex) = @_;

  return $tex =~ m{\A \s* (\S{1,2}) (.*) \1 \s* \z}x ? $2 : $tex;
}

my $SEQUENCE = "aa";
sub formula {
  my %args = @_;
  my ($tex, $file, $lastmod, $formula_provider) =
    @args{qw(tex file lastmod provider)};

  print D "Converting formula <<$tex>>\n";
  print D " Using provider '$formula_provider'\n";
  if ($formula_provider eq "local-tex") {
    return local_tex($tex, $file, $lastmod);

  } elsif ($formula_provider eq "mathjax") {
    if ($tex !~ /(?<!\\)(?:\\\\)*\$/) {
      $tex = "\$\$$tex\$\$"; # Add $$...$$ if there are no dollar signs at all
      print D "Added \$\$...\$\$\n";
      # Mathjax will take it from there
    } elsif ($tex =~ /\A\s*(\${1,2})(.*)\1\s*\z/s) { # already delimited by $'s
      if ($1 eq '$') {
        print D "Already has \$...\$; converting to !!...!!\n";
        $tex = "!!$2!!"
      } elsif ($1 eq '$$') {
        print D "Already has \$\$...\$\$; doing nothing\n";
      } else {
        die "CAN'T HAPPEN";
      }
    } else {
      print D "Has no delimiters; adding !!...!!!\n";
      $tex = "!!$tex!!";
    }
    return $tex;

  } elsif ($formula_provider eq "72pines") {
    # http://tex.72pines.com/latex.php?latex=x%2by^2
    die "UNIMPLEMENTED";
  } elsif ($formula_provider eq "google-charts") {
    # https://google-developers.appspot.com/chart/infographics/docs/formulas
    # Deprecated as of 20120420
    #    $tex = strip_dollars($tex);
    # Google handles $...$ and $$...$$ reasonably
    my $center = $tex =~ /^\s*\$\$/;
    $tex =~ s/(\W)/sprintf("%%%02x", ord($1))/eg;
    my $res = qq{<img src="https://chart.googleapis.com/chart?chf=bg,s,00000000&cht=tx&chl=$tex">};
    $res = qq{<p align=center>$res</p>} if $center;
    return $res;
  } elsif ($formula_provider eq "mathtran") {
    # http://www.mathtran.org/
  } else {
    die "Unknown formula rendering provider '$formula_provider'";
  }
}

sub local_tex {
  my ($tex, $file, $lastmod) = @_;

  # Add $$...$$ unless something like it is there already
  $tex = "\$\$$tex\$\$"  unless $tex =~ /(?<!\\)(?:\\\\)*\$/;

  print D "-----\nFormula for file '$file':\n\t$tex\n\n";
  print D ".blog file last mod " . localtime($lastmod) . "\n";
  $file ||= "formula_" . $SEQUENCE++;
  $file .= ".gif" unless $file =~ /\.gif$/;

  return imglink(file => $file, tex => $tex) unless $blosxom::flavour eq "html";

  my $texsave = "$target/$file.tex";
  my $targmod = (stat $texsave)[9];
  print D ".tex file ($texsave) last mod " . localtime($targmod) . "\n";
  if (defined($targmod) && $lastmod <= $targmod) {
    print D ".tex file more recent than .blog file; won't regenerate.\n";
    return imglink(file => $file, tex => $tex)
  }

  my $old_tex = do {
      my $RESULT;
      if (open my($fh), "<", $texsave) {
          local $/;
          $RESULT = <$fh>;
      }
      $RESULT;
  };

  if (!defined($old_tex) || $old_tex ne $tex) {
    my $cmd = "$formula -o $file -t $target";
    print D "Regenerating image file\n";
    my $start = time;
    unless (open F, "|$cmd >> $texlogfile 2>&1") {
      return "<b>Couldn't run <tt>$cmd</tt>: $!</b>";
    }
    print F $tex;
    unless (close F) {
      my $x = $? >> 8;
      return "<b>Couldn't finish <tt>$cmd</tt>: $! (exit $x)</b>";
    }

    if (open F, ">", $texsave) {
      print F $tex;
      close F;
    }
    my $elapsed = time() - $start;
    my $secs = $elapsed == 1 ? "sec" : "secs";
    print D "Finished conversion in $elapsed $secs\n";
  } else {
    print D "TeX code hasn't changed since last time\n";
  }


  return imglink(file => $file, tex => $tex);
}

sub imglink {
  my %args = @_;
  my $file = $args{file};
  $file .= ".gif" unless $file =~ /\.gif$/;

  my $alt = $args{tex} || fetch_tex($file);

  my %esc = ('"' => "quot" , '>' => "gt", '<' => "lt");

  for ($alt) {
    tr/ \t\n\r\f/ /s;
#    s/^\s*\$+\s*//;
#    s/\s*\$+\s*$//;
    s/(["><])/$esc{$1}/g;
  }
  $alt = qq{alt="$alt"} if $alt;
#  $alt = "";  # Until stupid RSS problem fixed

        print D "testmode is $blosxom::testmode\n";

  $blosxom::testmode ? 
    qq{<img $alt border=0 src="http://plover.com:8080/~mjd/pictures/blog/tex/$file">}
  :
    qq{<img $alt border=0 src="http://pic.blog.plover.com/tex/$file">};
}

sub fetch_tex {
  my $file = shift;
  $file = "/home/mjd/public_html/pictures/blog/tex/$file.tex";
  open my($f), "<", $file or return "";
  join "", <$f>;
}

sub story {
  my ($pkg, $path, $filename, $story_ref, $title_ref, $body_ref, $base) = @_;

  print D "story args: @_\n";

  my $file = join "/", $blosxom::datadir, $base;
  my $lastmod = (stat $file)[9];
  print D ".blog file ($file) last mod " . localtime($lastmod) . "\n";

  my $formula_provider =
    meta::get("$path/$filename", "formulas.$blosxom::flavour") ||
    meta::get("$path/$filename", "formulas")                   ||
    ($blosxom::flavour eq "html" ? "mathjax" : "google-charts");

  # DEBUG
  $$body_ref = qq{<font size="+1" color="darkblue">formula provider: $formula_provider</font><p>\n\n $$body_ref}
        if $blosxom::testmode;

  if ($formula_provider ne 'mathjax') {
    $$body_ref =~ 
      s{!!(.*?)!!}
       {formula(tex => "\$$1\$", provider => $formula_provider)}egxs;
  }

  $$body_ref =~ 
    s{< \s* formula \s* (?: file \s* = \s*
                            (?: "([^"]*)" | ([\w-]+) ) )? \s* >
	(.*?)
       < \s* /formula \s* >}
     {formula(tex => $3, file => $1||$2, lastmod => $lastmod,
              provider => $formula_provider)}egxs;

  $$body_ref =~ 
    s{< \s* formimg \s* file \s* = \s*
                        (?: "([^"]*)" | ([\w-]+) ) \s* >}
     {imglink(file => $1||$2, provider => $formula_provider)}gexs;

  return 1;
}

1;
